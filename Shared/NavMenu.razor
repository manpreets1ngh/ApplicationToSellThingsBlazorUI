@using Fluxor;
@using ApplicationToSellThings.BlazorUI.Services.Interfaces;
@using ApplicationToSellThings.BlazorUI.Pages.Cart
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject IState<AuthState> AuthState
@inject IDispatcher Dispatcher

<nav class="navbar navbar-expand-md mb-4">
    <div class="container">
        <a class="navbar-brand" href="">Vision</a>
        <button class="navbar-toggler @NavButtonCssClass" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse"
                aria-controls="navbarCollapse" aria-label="Toggle navigation" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse @NavBarCssClass" id="navbarCollapse" @onclick="ToggleNavMenu">
            <div class="navbar-nav flex-grow-1">
                @if(AuthStateValue.IsAuthenticated)
                {
                    @if (AuthStateValue.UserRoles.Contains("User"))
                    {
                        <ul class="navbar-nav me-auto mb-2 mb-md-0">
                            <li class="nav-item">
                                <NavLink class="nav-link" href="products" Match="NavLinkMatch.All">
                                    <span class="" aria-hidden="true"></span> Products
                                </NavLink>
                            </li>
                            <li class="nav-item">
                                <NavLink class="nav-link" href="orders">
                                    <span class="" aria-hidden="true"></span> Orders
                                </NavLink>
                            </li>
                        </ul>
                    }

                    <ul class="navbar-nav flex-grow justify-content-end">
                        <li>
                            <CartIcon />
                        </li>
                        <li class="nav-item dropdown">
                            <a class="nav-link " id="navbarDropdown" role="button" @onclick="ToggleDropdown" aria-expanded="@showDropdown">
                                @FormatUserName(AuthState.Value.UserName)
                            </a>
                            <div class="@DropdownCssClass dropdown-menu" aria-labelledby="navbarDropdown">
                                <NavLink class="nav-item dropdown-item" href="user/profile">Manage Profile</NavLink>
                                <NavLink class="nav-item dropdown-item mt-2" href="user/address">Add Address</NavLink>
                                <div class="dropdown-divider"></div>
                                <NavLink type="button" class="nav-item dropdown-item" @onclick="Logout">
                                    Logout</NavLink>
                            </div>
                        </li>
                    </ul>
                }                
                else
                {
                    <ul class="navbar-nav flex-grow">
                        <li class="nav-item">
                            <NavLink class="nav-link" href="products" Match="NavLinkMatch.All">
                                <span class="" aria-hidden="true"></span> Products
                            </NavLink>
                        </li>
                    </ul>
                    
                    <ul class="navbar-nav flex-grow">
                        <li class="nav-item">
                            <NavLink class="nav-link" href="/auth/register-account">
                                <span class="" aria-hidden="true"></span> Register
                            </NavLink>
                        </li>
                        <li class="nav-item">
                            <NavLink class="nav-link" href="/auth/login">
                                <span class="" aria-hidden="true"></span> Login
                            </NavLink>
                        </li>
                    </ul>
                }
            </div>            
        </div>
    </div>
</nav>

@code {
    
    private AuthState AuthStateValue => AuthState.Value;

    private List<string>? UserRoles { get; set; }
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private bool showDropdown = false;
    private string? DropdownCssClass => showDropdown ? "show" : null;
    private string? NavBarCssClass => collapseNavMenu ? null : "show";
    private string? NavButtonCssClass => collapseNavMenu ? "collapsed" : null;
    private string userName = "User";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        StateHasChanged();
        if (AuthStateValue.IsAuthenticated)
        {
            StateHasChanged();
        }
    }
    
    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
        StateHasChanged();
    }

    private void ToggleDropdown()
    {
        showDropdown = !showDropdown;
    }
    private Task Logout()
    {
        // Implement logout logic here
        AuthService.SignOutAsync();
        StateHasChanged();
        NavigationManager.NavigateTo("/auth/login");
        StateHasChanged();
        return Task.CompletedTask;
    }
    
    private string FormatUserName(string userName)
    {
        if (string.IsNullOrWhiteSpace(userName))
        {
            return userName;
        }

        return System.Text.RegularExpressions.Regex.Replace(userName, "(\\B[A-Z])", " $1");
    }
}
