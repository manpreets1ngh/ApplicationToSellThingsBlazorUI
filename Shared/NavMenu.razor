@using ApplicationToSellThings.BlazorUI.Models
@using ApplicationToSellThings.BlazorUI.Services
@using ApplicationToSellThings.BlazorUI.Store.Action
@using Fluxor;
@using ApplicationToSellThings.BlazorUI.Services.Interfaces;
@using ApplicationToSellThings.BlazorUI.Pages.Cart
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject IState<AuthState> AuthState
@inject IDispatcher Dispatcher

@if(AuthState.Value.IsAuthenticated)
{
    @if (AuthState.Value.UserRoles.Contains("User"))
    {
        <nav class="navbar navbar-expand-lg navbar-light bg-light">
            <div class="container d-flex justify-content-between">
                <a class="navbar-brand" href="#">SELL.</a>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse justify-content-center" id="navbarNav">
                    <ul class="navbar-nav mr-auto">
                        <li class="nav-item">
                            <a class="nav-link" href="/products">Shop</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/orders">Orders</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/orders">Contact</a>
                        </li>
                        
                    </ul>

                    <div class="navbar-icons ml-auto">                    
                        <div class="search-section">
                            <div class="search-container" id="searchContainer">
                                <input type="text" class="form-control" placeholder="Search...">
                            </div>
                            <button class="btn btn-link nav-icon" @onclick="ToggleSearch">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>

                        <a href="#" class="nav-icon">
                            <CartIcon />
                        </a>
                        <div class="user-icon-menu dropdown">
                            <a class="nav-link nav-icon" id="userDropdown" role="button" @onclick="ToggleDropdown" aria-expanded="@showDropdown">
                                <i class="fas fa-user-circle"></i>
                            </a>
                            <div class="@DropdownCssClass dropdown-menu dropdown-menu-right" aria-labelledby="userDropdown">
                                <span class="dropdown-item disabled">@FormatUserName(AuthState.Value.UserName)</span>
                                <NavLink class="dropdown-item" href="/user/dashboard">Manage Profile</NavLink>
                                <NavLink class="dropdown-item" href="/user/address">Add Address</NavLink>
                                <NavLink type="button" class="dropdown-item" @onclick="Logout">
                                    Logout
                                </NavLink>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </nav>
    }
}
else
{
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <div class="container">
            <a class="navbar-brand" href="#">SELL.</a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse justify-content-center" id="navbarNav">
                <ul class="d-flex navbar-nav mr-auto">
                    <li class="nav-item d-flex justify-content-center">
                        <a class="nav-link" href="/products">Home</a>
                    </li>
                </ul>
                <div class="navbar-icons ml-auto">                         
                    <div class="search-section">
                        <div class="search-container" id="searchContainer">
                            <input type="text" class="form-control" placeholder="Search...">
                        </div>
                        <button class="btn btn-link nav-icon" @onclick="ToggleSearch">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                    <a href="#" class="p-1">
                        <CartIcon />
                    </a>                    
                </div>

                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link" href="/auth/register-account">Register</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/auth/login">Login</a>
                    </li>
                </ul>

            </div>
        </div>
    </nav>
}



@code {

    private List<string>? UserRoles { get; set; }
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private bool showDropdown = false;
    private string? DropdownCssClass => showDropdown ? "show" : null;
    private string? NavBarCssClass => collapseNavMenu ? null : "show";
    private string? NavButtonCssClass => collapseNavMenu ? "collapsed" : null;
    private string userName = "User";
    private string BrandName = "MyStore";
    private bool IsUserAuthenticated { get; set; }
    private string SearchTerm { get; set; }
    private bool IsSearchActive { get; set; }
    private bool isMenuOpen { get; set; }
    private bool isUserMenuOpen { get; set; }

    private string burgerIcon => isMenuOpen ? Icons.Material.Filled.Close : Icons.Material.Filled.Menu;
    [Inject] IJSRuntime JSRuntime { get; set; }

    protected override async Task OnInitializedAsync()
    {   
        AuthState.StateChanged += OnAuthStateChanged;
    }

    private void OnAuthStateChanged(object sender, EventArgs e)
    {
        if (AuthState.Value.IsAuthenticated != IsUserAuthenticated)
        {
            IsUserAuthenticated = AuthState.Value.IsAuthenticated;
            StateHasChanged();
        }
    }


    public void Dispose()
    {
        // Unsubscribe when the component is disposed
        AuthState.StateChanged -= OnAuthStateChanged;
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void ToggleDropdown()
    {
        showDropdown = !showDropdown;
    }
    private Task Logout()
    {
        /*
        // Implement logout logic here
        AuthService.SignOutAsync();
        StateHasChanged();
        NavigationManager.NavigateTo("/auth/login");
        StateHasChanged();
        return Task.CompletedTask;
        */

        Dispatcher.Dispatch(new LogoutAction());

        NotificationService.Notify(new NotificationModel
            {
                Icon = Icons.Material.Outlined.CheckCircle,
                Title = "Logged Out",
                Message = "You have been logged out successfully.",
                Type = NotificationMessageType.Success,
                Duration = 3000
            });

        NavigationManager.NavigateTo("/auth/login");
        return Task.CompletedTask;
    }

    private string FormatUserName(string userName)
    {
        if (string.IsNullOrWhiteSpace(userName))
        {
            return userName;
        }

        return System.Text.RegularExpressions.Regex.Replace(userName, "(\\B[A-Z])", " $1");
    }

    private void ToggleUserMenu()
    {
        // Toggle the user profile menu dropdown
        isUserMenuOpen = !isUserMenuOpen;

        // Close the main menu if the user menu is opened
        if (isUserMenuOpen)
        {
            isMenuOpen = false;
        }
    }

    private async Task ToggleSearch()
    {
        await JSRuntime.InvokeVoidAsync("toggleSearch");
    }

    private void ToggleMenu()
    {
        isMenuOpen = !isMenuOpen;
    }
}
