@page "/products/create"
@using ApplicationToSellThings.BlazorUI.Models.Products
@using ApplicationToSellThings.BlazorUI.Services.Interfaces
@inject IProductsService ProductService
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-5">
    <MudText Align="Align.Left" Class="mt-3 mb-5" Typo="Typo.h4">Create product</MudText>
    <EditForm Model="@ProductModel" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator/>
        <MudGrid>
            <MudItem xs="12" sm="4">
                <MudText Align="Align.Left" Typo="Typo.body1">Product Name</MudText>
                <MudTextField Variant="Variant.Outlined" @bind-Value="@ProductModel.ProductName" Required="true" RequiredError="ProductName is required" For="@(() => ProductModel.ProductName)"></MudTextField>
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudText Align="Align.Left" Typo="Typo.body1">Brand Name</MudText>
                <MudTextField Variant="Variant.Outlined" @bind-Value="@ProductModel.BrandName" Required="true" RequiredError="BrandName is required" For="@(() => ProductModel.BrandName)"></MudTextField>
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudText Align="Align.Left" Typo="Typo.body1">Price</MudText>
                <MudTextField Variant="Variant.Outlined" @bind-Value="@ProductModel.Price" Required="true" RequiredError="Price is required" For="@(() => ProductModel.Price)"></MudTextField>
            </MudItem>

            <MudItem xs="12" sm="4">
                <MudText Align="Align.Left" Typo="Typo.body1">Discount</MudText>
                <MudTextField Variant="Variant.Outlined" @bind-Value="@ProductModel.Discount" For="@(() => ProductModel.Discount)"></MudTextField>
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudText Align="Align.Left" Typo="Typo.body1">Quantity</MudText>
                <MudTextField Variant="Variant.Outlined" @bind-Value="@ProductModel.QuantityInStock" Required="true" RequiredError="QuantityInStock is required" For="@(() => ProductModel.QuantityInStock)"></MudTextField>
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudText Align="Align.Left" Typo="Typo.body1">Category</MudText>
                <MudTextField Variant="Variant.Outlined" @bind-Value="@ProductModel.Category" Required="true" RequiredError="Category is required" For="@(() => ProductModel.Category)"></MudTextField>
            </MudItem>

            <MudItem xs="12" sm="4">
                <MudText Align="Align.Left" Typo="Typo.body1">Description</MudText>
                <MudTextField Variant="Variant.Outlined" @bind-Value="@ProductModel.Description" Required="true" InputType="InputType.Text" Lines="5" RequiredError="Description is required" For="@(() => ProductModel.Description)"></MudTextField>
            </MudItem>
            <MudItem xs="12" sm="4">
                <div class="mt-3">
                    <label for="fileUpload" class="form-label">Upload Image</label>
                    <br/>
                    <InputFile id="fileUpload" OnChange="LoadFiles" />
                </div>
                @if (!string.IsNullOrEmpty(uploadedFileName))
                {
                    <div class="mb-3">
                        <MudText>Uploaded File: @uploadedFileName</MudText>
                    </div>
                }
            </MudItem>

            <MudItem xs="12" Class="text-start">
                <button class="product-create mt-3 mb-3" type="submit">Create Product</button>
            </MudItem>

        </MudGrid>
    </EditForm>
</MudContainer>

@code {
    private Product ProductModel = new Product();
    private string uploadedFileName;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            uploadedFileName = file.Name;
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);
            ProductModel.ProductImage = buffer;
        }
    }
    
    private async Task OnValidSubmit()
    {
        var result = await ProductService.CreateProductAsync(ProductModel);
        if (result != null)
        {
            NavigationManager.NavigateTo("/products");
        }
    }
}