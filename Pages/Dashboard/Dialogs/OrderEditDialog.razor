@using ApplicationToSellThings.BlazorUI.Models
@using ApplicationToSellThings.BlazorUI.Models.Orders
@using ApplicationToSellThings.BlazorUI.Services
@using ApplicationToSellThings.BlazorUI.Services.Interfaces
@inject IOrderService OrderService
@inject IStatusService StatusService
@inject NotificationService Notification

<MudDialog Style="background-color: #F4F4F4; border-radius: 10px;">
    <DialogContent>

        <MudForm>
            <MudGrid>
                <MudItem xs="6">
                    <MudTextField T="string" Label="Order ID" @bind-Value="OrderIdString" Disabled="true"/>
                    <MudTextField T="string" Label="User ID" @bind-Value="UserIdString" Disabled="true"/>
                    <MudTextField T="string" Label="Card ID" @bind-Value="CardIdString" Disabled="true"/>
                    <MudTextField T="DateTime?" Label="Order Date" @bind-Value="Order.OrderCreatedAt" Disabled="true"/>
                    @if (Order.OrderUpdatedAt != null)
                    {
                        <MudTextField T="DateTime?" Label="Order Date" @bind-Value="Order.OrderCreatedAt" Disabled="true"/>
                    }
                </MudItem>
                <MudItem xs="6">
                    <MudSelect T="string" Label="Order Status" @bind-Value="SelectedOrderStatusAlias">
                        @if (OrderStatusOptions?.Any() == true)
                        {
                            @foreach (var status in OrderStatusOptions)
                            {
                                <MudSelectItem Value="@status.Alias">@status.Name</MudSelectItem>
                            }
                        }                        
                    </MudSelect>
                    <MudSelect T="int" Label="Delivery Status" @bind-Value="SelectedDeliveryStatusId">
                        @if (DeliveryStatusOptions?.Any() == true)
                        {
                            @foreach (var status in DeliveryStatusOptions)
                            {
                                <MudSelectItem Value="@status.Id">@status.Name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                    <MudTextField T="string" Label="Payment method" @bind-Value="Order.PaymentMethod" Disabled="true"/>
                    <MudTextField T="decimal" Label="Tax" @bind-Value="Order.Tax"/>
                </MudItem>
            </MudGrid>
            @if (Order.OrderDetails.Count > 1)
            {
                <MudGrid>
                    <MudItem xs="12">
                        <MudText Typo="Typo.h6" Class="mt-2 mb-3">Products In Order</MudText>
                        <MudTable Items="@Order.OrderDetails" Hover="true" Style="background-color: #F4F4F4;border-radius: 15px;">
                            <HeaderContent>
                                <MudTh>Product Id</MudTh>
                                <MudTh>Product Name</MudTh>
                                <MudTh>Brand Name</MudTh>
                                <MudTh>Quantity In Stock</MudTh>
                                <MudTh>Product Price</MudTh>
                                <MudTh>Quantity Ordered</MudTh>
                                <MudTh>Total</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Product Id" Disabled="true">@context.ProductId</MudTd>
                                <MudTd DataLabel="Product Name">@context.Product.ProductName</MudTd>
                                <MudTd DataLabel="Brand Name">@context.Product.BrandName</MudTd>
                                <MudTd DataLabel="Quantity In Stock">@context.Product.QuantityInStock</MudTd>
                                <MudTd DataLabel="Product Price">£@context.Product.Price</MudTd>
                                <MudTd DataLabel="Quantity Ordered">@context.Quantity</MudTd>
                                <MudTd DataLabel="Total">£@context.Total</MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudItem>
                </MudGrid>
            }
            else
            {
                @foreach (var orderDetail in Order.OrderDetails)
                {
                    <MudGrid>
                        <MudItem xs="6">
                            <MudTextField T="Guid" Label="Product Id" @bind-Value="@orderDetail.ProductId"/>
                            <MudTextField T="string" Lines="3" Label="Product Name" @bind-Value="@orderDetail.Product.ProductName"/>
                            <MudTextField T="string" Label="Brand Name" @bind-Value="@orderDetail.Product.BrandName"/>
                            <MudTextField T="int" Label="Quantity In Stock" @bind-Value="@orderDetail.Product.QuantityInStock"/>
                        </MudItem>
                        <MudItem xs="6">
                            <MudTextField T="decimal" Label="Product Price" @bind-Value="@orderDetail.Product.Price"/>
                            <MudTextField T="int" Label="Quantity" @bind-Value="@orderDetail.Quantity"/>
                            <MudTextField T="decimal" Label="Total" @bind-Value="@orderDetail.Total"/>
                        </MudItem>
                    </MudGrid>
                }
            }

            <MudGrid>
                <MudItem xs="6"></MudItem>
                <MudItem xs="6">
                    <MudGrid>
                        <MudItem xs="6">
                            <MudText Class="mt-lg-5" Align="Align.Start" Typo="Typo.h6">Total Amount:</MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudTextField T="decimal" Class="mb-lg-5" AdornmentColor="Color.Dark" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.CurrencyPound" IconSize="Size.Small" @bind-Value="Order.TotalAmount"/>
                        </MudItem>
                    </MudGrid>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Info" Variant="Variant.Outlined" Class="rounded-3 mb-3" OnClick="Save">Save</MudButton>
        <MudButton OnClick="Cancel" Color="Color.Default" Variant="Variant.Outlined" Class="rounded-3 mr-4 mb-3">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public Order Order { get; set; }
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    private List<StatusModel> OrderStatusOptions = new List<StatusModel>();
    private List<StatusModel> DeliveryStatusOptions = new List<StatusModel>();
    private string SelectedOrderStatusAlias { get; set; }
    private int SelectedDeliveryStatusId { get; set; }
    private string OrderIdString
    {
        get => Order.OrderId.ToString();
        set => Order.OrderId = Guid.TryParse(value, out var guid) ? guid : Guid.Empty;
    }

    private string UserIdString
    {
        get => Order.UserId.ToString();
        set => Order.UserId = Guid.TryParse(value, out var guid) ? guid : Guid.Empty;
    }

    private string CardIdString
    {
        get => Order.CardId.ToString();
        set => Order.CardId = Guid.TryParse(value, out var guid) ? guid : Guid.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        // Fetch order statuses
        var listOfStatus = await StatusService.GetAllStatusInfo();
        OrderStatusOptions = listOfStatus.Where(s => s.Type.Equals("Order", StringComparison.OrdinalIgnoreCase)).ToList();
        DeliveryStatusOptions = listOfStatus.Where(s => s.Type.Equals("Delivery", StringComparison.OrdinalIgnoreCase)).ToList();

        // Preselect the current order status
        SelectedOrderStatusAlias = OrderStatusOptions
       .FirstOrDefault(s => s.Name.Equals(Order.OrderStatus, StringComparison.OrdinalIgnoreCase))?.Alias;

        SelectedDeliveryStatusId = DeliveryStatusOptions
        .FirstOrDefault(s => s.Id == Order.ShippingInfo?.DeliveryStatusId)?.Id ?? 0;
    }


    private async Task Save()
    {
        // Determine if there is a change in Order Status
        var selectedOrderStatus = OrderStatusOptions.FirstOrDefault(s => s.Alias == SelectedOrderStatusAlias);
        bool isOrderStatusUpdated = selectedOrderStatus != null && selectedOrderStatus.Name != Order.OrderStatus;

        // Determine if there is a change in Delivery Status
        var selectedDeliveryStatus = DeliveryStatusOptions.FirstOrDefault(ds => ds.Id == SelectedDeliveryStatusId);
        bool isDeliveryStatusUpdated = selectedDeliveryStatus != null &&
                                        Order.ShippingInfo != null &&
                                        selectedDeliveryStatus.Name != Order.ShippingInfo.DeliveryStatus?.Name;

        try
        {
            if (isOrderStatusUpdated && isDeliveryStatusUpdated)
            {
                // Both Order Status and Delivery Status are updated
                Order.OrderStatus = selectedOrderStatus.Name;

                // Fetch full details of the selected Delivery Status
                var deliveryStatusDetails = await StatusService.GetStatusInfoById(SelectedDeliveryStatusId);
                if (deliveryStatusDetails != null)
                {
                    Order.ShippingInfo.DeliveryStatusId = deliveryStatusDetails.Id;
                    Order.ShippingInfo.DeliveryStatus = deliveryStatusDetails;
                }

                // Use combined API call
                await OrderService.UpdateOrderStatusandShippingInfo(Order.OrderId, Order.OrderStatus, Order.ShippingInfo);
            }
            else if (isOrderStatusUpdated)
            {
                // Only Order Status is updated
                Order.OrderStatus = selectedOrderStatus.Name;

                // Call UpdateOrder API
                await OrderService.UpdateOrder(Order.OrderId, Order);
            }
            else if (isDeliveryStatusUpdated)
            {
                // Only Delivery Status is updated
                if (Order.ShippingInfo != null)
                {
                    // Fetch full details of the selected Delivery Status
                    var deliveryStatusDetails = await StatusService.GetStatusInfoById(SelectedDeliveryStatusId);
                    if (deliveryStatusDetails != null)
                    {
                        Order.ShippingInfo.DeliveryStatusId = deliveryStatusDetails.Id;
                        Order.ShippingInfo.DeliveryStatus = deliveryStatusDetails;

                        // Call UpdateShippingInfo API
                        await OrderService.UpdateShippingInfo(Order.OrderId, Order.ShippingInfo);
                    }
                }
            }
            else
            {
                // No changes to save
                Notification.Notify(new NotificationModel
                    {
                        Message = "No changes detected.",
                        Type = NotificationMessageType.Info
                    });
                return;
            }

            // Notify success and close dialog
            Notification.Notify(new NotificationModel
                {
                    Message = "Order information updated successfully.",
                    Type = NotificationMessageType.Success
                });
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (Exception ex)
        {
            // Notify error
            Notification.Notify(new NotificationModel
                {
                    Message = $"Failed to update order: {ex.Message}",
                    Type = NotificationMessageType.Error
                });
        }
    }


    
    private void Cancel()
    {
        MudDialog.Cancel();
    }
}
