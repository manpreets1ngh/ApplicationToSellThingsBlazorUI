@page "/orders"
@using ApplicationToSellThings.BlazorUI.Helper;
@using ApplicationToSellThings.BlazorUI.Models.Orders;
@using ApplicationToSellThings.BlazorUI.Models;
@using ApplicationToSellThings.BlazorUI.Services.Interfaces;
@using ApplicationToSellThings.BlazorUI.Services;
@inject IOrderService OrderService
@inject IState<AuthState> AuthState
@inject UserDetailHelper UserHelper
@inject NotificationService Notification

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger">@errorMessage</p>
}
<section class="gradient-custom">
    <div class="container py-5 h-100">
        <div class="row">

            <MudTable Items="@OrdersList.Take(OrdersList.Count)" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
                <HeaderContent>
                    <MudTh>OrderId</MudTh>
                    <MudTh>Product</MudTh>
                    <MudTh>Price</MudTh>
                    <MudTh>Quantity</MudTh>
                    <MudTh>Total</MudTh>
                    <MudTh>Order Status</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTr Class="@(IsNewOrder(context.OrderCreatedAt) ? "new-order" : "")">
                        @if (@context.OrderDetails.Count > 1)
                        {
                            <MudTd DataLabel="OrderId">@context.OrderId</MudTd>
                            @foreach (var product in @context.OrderDetails)
                            {
                                <MudTr>
                                    <MudTd DataLabel="ProductName">@product.Product.ProductName</MudTd>
                                    <MudTd DataLabel="ProductPrice">@product.Product.Price</MudTd>
                                    <MudTd DataLabel="Quantity">@product.Quantity</MudTd>
                                </MudTr>
                            }
                            <MudTd DataLabel="Total">@context.TotalAmount</MudTd>
                            <MudTd DataLabel="OrderStatus">@context.OrderStatus</MudTd>
                        }
                        else
                        {
                            <MudTd DataLabel="OrderId">@context.OrderId</MudTd>
                            @foreach (var product in @context.OrderDetails)
                            {
                                <MudTd DataLabel="ProductName">@product.Product.ProductName</MudTd>
                                <MudTd DataLabel="ProductPrice">@product.Product.Price</MudTd>
                                <MudTd DataLabel="Quantity">@product.Quantity</MudTd>
                            }
                            <MudTd DataLabel="Total">@context.TotalAmount</MudTd>
                            <MudTd DataLabel="OrderStatus">@context.OrderStatus</MudTd>
                        }
                    </MudTr>
                    
                </RowTemplate>
            </MudTable>
        </div>
    </div>
</section>


@code {
    
    [Inject] 
    private NavigationManager NavigationManager { get; set; }
    
    private string errorMessage = string.Empty;
    private List<Order> OrdersList { get; set; }
    private bool _loading;
    private Guid userId;
    private string productName;

    protected override async Task OnInitializedAsync()
    {
        if (AuthState.Value.IsAuthenticated)
        {
            var userDetail = UserHelper.GetUserDetailFromToken(AuthState.Value.Token);
            userId = Guid.Parse(userDetail.Id);
            OrdersList = await OrderService.GetOrdersListForUser(userId);
        }
        
        StateHasChanged();
    }
    
    private bool IsNewOrder(DateTime? orderCreatedAt)
    {
        // Assuming new orders are those created within the last day
        if (!orderCreatedAt.HasValue) return false;
        return (DateTime.UtcNow - orderCreatedAt.Value).TotalDays <= 1;
    }
}
