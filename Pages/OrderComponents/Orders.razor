@page "/orders"
@using ApplicationToSellThings.BlazorUI.Helper;
@using ApplicationToSellThings.BlazorUI.Models.Orders;
@using ApplicationToSellThings.BlazorUI.Models;
@using ApplicationToSellThings.BlazorUI.Services.Interfaces;
@using ApplicationToSellThings.BlazorUI.Services;
@inject IOrderService OrderService
@inject IState<AuthState> AuthState
@inject UserDetailHelper UserHelper
@inject NotificationService Notification

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger">@errorMessage</p>
}
<section class="gradient-custom">
    <div class="container py-5 h-100">
        <div class="row">
            <MudTable Items="@OrdersList.Take(OrdersList.Count)" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
                <HeaderContent>
                    <MudTh>Product</MudTh>
                    <MudTh>Price</MudTh>
                    <MudTh>Quantity</MudTh>
                    <MudTh>Total</MudTh>
                    <MudTh>Order Status</MudTh>
                </HeaderContent>
                <RowTemplate>
                    @if (context.OrderDetails.Count > 1)
                    {
                        <MudTr>
                            <MudExpansionPanels>
                                <MudExpansionPanel Text="Products">
                                    @foreach (var detail in context.OrderDetails)
                                    {
                                        <MudTr>
                                                <MudTd DataLabel="ProductName">@detail.Product.ProductName</MudTd>
                                                <MudTd DataLabel="ProductPrice">@detail.Product.Price</MudTd>
                                                <MudTd DataLabel="Quantity">@detail.Quantity</MudTd>
                                        </MudTr>
                                    
                                    }                                    
                                </MudExpansionPanel>
                            </MudExpansionPanels>
                            
                        </MudTr>                        
                     
                    }
                    else
                    {
                        @foreach (var orderDetail in @context.OrderDetails)
                        {
                                <MudTd DataLabel="ProductName">@orderDetail.Product.ProductName</MudTd>
                                <MudTd DataLabel="ProductPrice">@orderDetail.Product.Price</MudTd>
                                <MudTd DataLabel="Quantity">@orderDetail.Quantity</MudTd>
                            
                        }
                    }

                    <MudTd DataLabel="Total">
                        @context.TotalAmount
                    </MudTd>
                    <MudTd DataLabel="OrderStatus">
                        @context.OrderStatus
                    </MudTd>
                    
                </RowTemplate>
            </MudTable>
        </div>
    </div>
</section>


@code {
    
    [Inject] 
    private NavigationManager NavigationManager { get; set; }
    
    private string errorMessage = string.Empty;
    private List<Order> OrdersList { get; set; }
    private OrderDetail OrderDetail { get; set; }
    private bool _loading;
    private Guid userId;
    private string productName;

    protected override async Task OnInitializedAsync()
    {
        if (AuthState.Value.IsAuthenticated)
        {
            var userDetail = UserHelper.GetUserDetailFromToken(AuthState.Value.Token);
            userId = Guid.Parse(userDetail.Id);
            OrdersList = await OrderService.GetOrdersListForUser(userId);
            
            if (OrdersList == null)
            {
                
            }
        }
        
    }
    
    private bool IsNewOrder(DateTime? orderCreatedAt)
    {
        // Assuming new orders are those created within the last day
        if (!orderCreatedAt.HasValue) return false;
        return (DateTime.UtcNow - orderCreatedAt.Value).TotalDays <= 1;
    }


}
