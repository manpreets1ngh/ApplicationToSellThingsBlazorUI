@page "/Orders/PlaceOrder"
@attribute [Authorize(Roles = "User")]

@using ApplicationToSellThings.BlazorUI.Helper;
@using ApplicationToSellThings.BlazorUI.Models.Orders;
@using ApplicationToSellThings.BlazorUI.Models.Products;
@using ApplicationToSellThings.BlazorUI.Models;
@using ApplicationToSellThings.BlazorUI.Services.Interfaces;
@using ApplicationToSellThings.BlazorUI.Services;
@using ApplicationToSellThings.BlazorUI.Store.Action;
@using ApplicationToSellThings.BlazorUI.Store.Action.CartActions
@inject NavigationManager NavigationManager
@inject IProductsService ProductService
@inject IAddressService AddressService
@inject ICardService CardService
@inject IOrderService OrderService
@inject IState<AuthState> AuthState
@inject IDispatcher Dispatcher
@inject IState<CheckoutState> CheckoutState
@inject UserDetailHelper UserHelper
@inject NotificationService Notification
@inject IJSRuntime JS

@if (!string.IsNullOrEmpty(errorMessage))
{
        <p class="text-danger">@errorMessage</p>
}
<section class="gradient-custom">
    <div class="container py-5 h-100">
        <div class="row">
            <div class="col-lg-7">
                <div class="form-check mb-3">
                    <MudCard Style="border-radius: 10px;">
                        <MudCardContent>
                            <MudText Typo="Typo.h6" Class="mt-1 mb-3">Delivery Address</MudText>

                            @if(selectedAddress != null)
                            {
                                <div class="address-display">
                                    <p>@UserInfo.UserName</p>
                                    <p>@selectedAddress.Street</p>
                                    <p>@selectedAddress.City, @selectedAddress.State, @selectedAddress.PostCode</p>
                                    <p>@selectedAddress.Country</p>
                                    
                                </div>
                            }
                            else
                            {
                                <MudSelect Class="mb-3" T="AddressViewModel" Label="Select your address" ValueChanged="@OnAddressSelected">
                                    @if (Addresses.Any())
                                    {
                                        foreach (var address in Addresses)
                                        {
                                            <MudSelectItem Value="@address">@address.Street, @address.City, @address.Country</MudSelectItem>
                                        }
                                    }
                                    else
                                    {
                                        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Text" Color="Color.Default" Class="ml-auto" OnClick="@AddNewAddressSelected">Add Delivery Address</MudButton>
                                    }
                                </MudSelect>
                            }
                            


                            @if (showAddNewAddress)
                            {
                                <EditForm Model="newAddress" OnValidSubmit="HandleAddNewAddress">
                                    <DataAnnotationsValidator />
                                    <MudTextField id="street" @bind-Value="newAddress.Street" Class="mt-2" Label="Street" For="@(() => newAddress.Street)" />
                                    <MudTextField id="city" @bind-Value="newAddress.City" Class="mt-2" Label="City" For="@(() => newAddress.City)" />
                                    <MudTextField id="state" @bind-Value="newAddress.State" Class="mt-2" Label="State" For="@(() => newAddress.State)" />
                                    <MudTextField id="postcode" @bind-Value="newAddress.PostCode" Class="mt-2" Label="Post Code" For="@(() => newAddress.PostCode)" />
                                    <MudTextField id="country" @bind-Value="newAddress.Country" Class="mt-2" Label="Country" For="@(() => newAddress.Country)" />
                                    <div class="form-group align-center mt-4">
                                        <button class=" btn-delivery-card" type="submit">Save Address</button>
                                    </div>
                                </EditForm>
                            }


                        </MudCardContent>
                    </MudCard>
                   @*  <h5>Delivery Address</h5>
                    <div class="row">
                        <div class="col-8 custom-select-wrapper">
                            @if(selectedAddress != null)
                            {
                                <div class="address-display">
                                    <p>@UserInfo.UserName</p>
                                    <p>@selectedAddress.Street</p>
                                    <p>@selectedAddress.City, @selectedAddress.State, @selectedAddress.PostCode</p>
                                    <p>@selectedAddress.Country</p>
                                    
                                </div>
                            }
                            else
                            {
                                <MudSelect T="AddressViewModel" Label="Select your address" ValueChanged="@OnAddressSelected">
                                    @if (Addresses.Any())
                                    {
                                        foreach (var address in Addresses)
                                        {
                                            <MudSelectItem Value="@address">@address.Street, @address.City, @address.Country</MudSelectItem>
                                        }
                                    }
                                    else
                                    {
                                        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Text" Color="Color.Default" Class="ml-auto" OnClick="@AddNewAddressSelected">Add Delivery Address</MudButton>
                                    }
                                </MudSelect>
                            }
                            


                            @if (showAddNewAddress)
                            {
                                <EditForm Model="newAddress" OnValidSubmit="HandleAddNewAddress">
                                    <DataAnnotationsValidator />
                                    <MudTextField id="street" @bind-Value="newAddress.Street" Class="mt-2" Label="Street" For="@(() => newAddress.Street)" />
                                    <MudTextField id="city" @bind-Value="newAddress.City" Class="mt-2" Label="City" For="@(() => newAddress.City)" />
                                    <MudTextField id="state" @bind-Value="newAddress.State" Class="mt-2" Label="State" For="@(() => newAddress.State)" />
                                    <MudTextField id="postcode" @bind-Value="newAddress.PostCode" Class="mt-2" Label="Post Code" For="@(() => newAddress.PostCode)" />
                                    <MudTextField id="country" @bind-Value="newAddress.Country" Class="mt-2" Label="Country" For="@(() => newAddress.Country)" />
                                    <div class="form-group align-center mt-4">
                                        <button class=" btn-delivery-card" type="submit">Save Address</button>
                                    </div>
                                </EditForm>
                            }

                        </div>
                    </div> *@
                    <br/>
                    <br/>
                    <MudCard Style="border-radius: 10px;">
                        <MudCardContent>
                            <MudText Typo="Typo.h6" Class="mt-1 mb-3">Payment Method</MudText>

                            <MudGrid Spacing="2">
                                <!-- Pay by Cash -->
                                <MudItem xs="6">
                                    <MudCard @onclick="@SetPaymentOptionToCash" Class="@(paymentOption == "cash" ? "card-selected" : "card-unselected")">
                                        <MudCardContent>
                                            <MudText Typo="Typo.h6" Align="Align.Center">Pay by Cash</MudText>
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>

                                <!-- Pay by Card -->
                                <MudItem xs="6">
                                    <MudCard @onclick="@SetPaymentOptionToCard" Class="@(paymentOption == "card" ? "card-selected" : "card-unselected")">
                                        <MudCardContent>
                                            <MudText Typo="Typo.h6" Align="Align.Center">Pay by Card</MudText>
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>
                            </MudGrid>

                            <div class="row">
                                <div class="col-8">
                                    @if (CheckoutState.Value.PaymentOption == "card")
                                    {
                                        @if (selectedCard != null)
                                        {
                                            <div class="card-display">
                                                <p>Cardholder Name: @selectedCard.CardHolderName</p>
                                                <p>Card Number: **** **** **** @selectedCard.CardNumber.Substring(@selectedCard.CardNumber.Length - 4)</p>
                                                <p>Expired On: @selectedCard.ExpiryDate.ToString("MM/yy")</p>
                                            </div>
                                        }
                                        else
                                        {
                                            <MudSelect T="CardDetail" Class="mt-3 mb-4" Label="Select Card" ValueChanged="@OnCardSelected">
                                                @if (CardDetails.Any())
                                                {
                                                    foreach (var card in CardDetails)
                                                    {
                                                        <MudSelectItem Value="@card">@($"**** **** **** {card.CardNumber.Substring(card.CardNumber.Length - 4)}")</MudSelectItem>

                                                    }
                                                }
                                                else
                                                {
                                                    <MudButton ButtonType="ButtonType.Button" Variant="Variant.Text" Color="Color.Default" Class="ml-auto" OnClick="@AddNewCardForPayment">Add New Card</MudButton>
                                                }
                                            </MudSelect>
                                        }


                                        @if (showAddNewCard)
                                        {
                                            <EditForm Model="newCardDetails" OnValidSubmit="HandleAddCard">
                                                <DataAnnotationsValidator />
                                                <MudTextField T="string" id="cardholdername" @bind-Value="newCardDetails.CardHolderName" Class="mt-2" Label="CardHolder Name" For="@(() => newCardDetails.CardHolderName)" />

                                                <MudTextField T="string" id="cardnumber" @bind-Value="CardNumberFormatted " Class="mt-2" Label="Card Number"
                                                              Immediate="true" OnInput="@OnCardNumberInput" For="@(() => newCardDetails.CardNumber)" />

                                                <MudTextField T="string" id="expirydate" @bind-Value="ExpiryDateString" Class="mt-2" Label="Expiry Date"
                                                              Placeholder="MM/YYYY" OnBlur="FormatExpiryDate" OnChange="@FormatExpiryDate" />

                                                <MudTextField T="int" id="cvv" @bind-Value="newCardDetails.Cvv" Class="mt-2" Label="Cvv" For="@(() => newCardDetails.Cvv)" />

                                                <div class="form-group justify-content-center mt-4">
                                                    <button class=" btn-delivery-card" type="submit">Save Card</button>
                                                </div>
                                            </EditForm>
                                        }

                                    }
                                    else if (CheckoutState.Value.PaymentOption == "cash")
                                    {
                                        <div class="mt-4">
                                            <p>You have chosen to pay by cash. No further information is required.</p>
                                        </div>
                                    }
                                </div>
                            </div>

                        </MudCardContent>
                    </MudCard>
                   @*  <h5>Payment Method</h5>
                    <div class="row">
                        <div class="col-8">
                            <div role="group" aria-label="Payment Method">
                                <button type="button"
                                        class="@(paymentOption == "cash" ? "btn-to-pay px-4 py-2" : "btn-to-pay-outline px-4 py-2")"
                                        @onclick="SetPaymentOptionToCash">
                                    Pay by Cash
                                </button>
                                <button type="button"
                                        class="@(paymentOption == "card" ? "btn-to-pay px-4 py-2" : "btn-to-pay-outline px-4 py-2")"
                                        @onclick="SetPaymentOptionToCard">
                                    Pay by Card
                                </button>
                            </div>
                        </div>                     
                    </div> *@
                    @* <div class="row">
                        <div class="col-8">
                            @if (CheckoutState.Value.PaymentOption == "card")
                            {
                                @if(selectedCard != null)
                                {
                                    <div class="card-display">
                                        <p>Cardholder Name: @selectedCard.CardHolderName</p>
                                        <p>Card Number: **** **** **** @selectedCard.CardNumber.Substring(@selectedCard.CardNumber.Length - 4)</p>
                                        <p>Expired On: @selectedCard.ExpiryDate.ToString("MM/yy")</p>
                                    </div>
                                }
                                else
                                {
                                    <MudSelect T="CardDetail" Label="Select Card" ValueChanged="@OnCardSelected">
                                        @if (CardDetails.Any())
                                        {
                                            foreach (var card in CardDetails)
                                            {
                                                <MudSelectItem Value="@card">@($"**** **** **** {card.CardNumber.Substring(card.CardNumber.Length - 4)}")</MudSelectItem>

                                            }
                                        }
                                        else
                                        {
                                            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Text" Color="Color.Default" Class="ml-auto" OnClick="@AddNewCardForPayment">Add New Card</MudButton>
                                        }
                                    </MudSelect>
                                }
                                

                                @if (showAddNewCard)
                                {
                                    <EditForm Model="newCardDetails" OnValidSubmit="HandleAddCard">
                                        <DataAnnotationsValidator />
                                        <MudTextField T="string" id="cardholdername" @bind-Value="newCardDetails.CardHolderName" Class="mt-2" Label="CardHolder Name" For="@(() => newCardDetails.CardHolderName)" />

                                        <MudTextField T="string" id="cardnumber" @bind-Value="CardNumberFormatted " Class="mt-2" Label="Card Number"
                                                      Immediate="true" OnInput="@OnCardNumberInput" For="@(() => newCardDetails.CardNumber)" />

                                        <MudTextField T="string" id="expirydate" @bind-Value="ExpiryDateString" Class="mt-2" Label="Expiry Date"
                                                      Placeholder="MM/YYYY" OnBlur="FormatExpiryDate" OnChange="@FormatExpiryDate" />

                                        <MudTextField T="int" id="cvv" @bind-Value="newCardDetails.Cvv" Class="mt-2" Label="Cvv" For="@(() => newCardDetails.Cvv)" />

                                        <div class="form-group justify-content-center mt-4">
                                            <button class=" btn-delivery-card" type="submit">Save Card</button>
                                        </div>
                                    </EditForm>
                                }

                            }
                            else if (CheckoutState.Value.PaymentOption == "cash")
                            {
                                <div class="mt-2">
                                    <p>You have chosen to pay by cash. No further information is required.</p>
                                </div>
                            }
                        </div>
                    </div> *@
                    <br>
                </div>
            </div>
            <div class="col-lg-5">
                @if (CheckoutState.Value.SelectedProducts != null && CheckoutState.Value.SelectedProducts.Any())
                {
                    @foreach (var product in CheckoutState.Value.SelectedProducts)
                    {
                        <div class="card mb-3">
                            <div class="card-body" style="margin: 10px 10px 10px 10px;">
                                <h5 class="card-title">@product.ProductName</h5>
                                <hr/>
                                <div class="row">
                                    <div class="col-8">
                                        <h6>Price:</h6>
                                    </div>
                                    <div class="col-4 text-end">
                                        <strong>£@product.Price.ToString()</strong>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-10">
                                        <h6 class="mt-5" for="quantity">Quantity:</h6>
                                    </div>
                                    <div class="col-2 text-center">
                                        <MudSelect T="int" Class="mb-1" ValueChanged="@(q => UpdateQuantity(product.ProductId.ToString(), q))" Value="CheckoutState.Value.Quantities[product.ProductId.ToString()]">
                                            @foreach(var quantity in GenerateQuantityOptions(product.QuantityInStock))
                                            {
                                                <MudSelectItem Value="@quantity">@quantity</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </div>
                                </div>
                                <br/>
                                <div class="row">
                                    <div class="col-8">
                                        <h5>Total:</h5>
                                    </div>
                                    <div class="col-4 text-end">
                                        <h5>£@(product.Price * CheckoutState.Value.Quantities[product.ProductId.ToString()])</h5>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }

                    <div class="card">
                        <div class="card-body" style="margin: 10px 10px 10px 10px;">
                            <div class="row">
                                <div class="col-8">
                                    <h5>Total Price:</h5>
                                </div>
                                <div class="col-4 text-end">
                                    <h5>@(CheckoutState.Value.TotalPrice.ToString("C"))</h5>
                                </div>
                            </div>
                            <br/>
                            <div class="row">
                                <div class="col-md-6">

                                </div>
                                <div class="col-md-6">
                                    <button class="@(!CheckoutState.Value.IsOrderReady ? "btn-checkout-notready px-4 py-2" : "btn-checkout px-4 py-2")" @onclick="HandlePlaceOrder" disabled="@(!CheckoutState.Value.IsOrderReady)" fullwidth="true">
                                        Checkout
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    }
                    else
                    {
                    <p>Product details are loading...</p>
                    }
            </div>            
        </div>        
    </div>
</section>

@code {
    private ProductViewModel ProductViewModel { get; set; }
    private UserDetail UserInfo { get; set; }
    private string errorMessage = string.Empty;
    private AddressViewModel selectedAddress;
    private List<AddressViewModel> Addresses = new List<AddressViewModel>();
    private AddressRequestModel newAddress = new AddressRequestModel();
    private bool showAddNewAddress = false;
    private bool showDropdownAddresses = false;
    private bool showDropdownCards = false;
    private Guid UserId;
    private string paymentOption;
    private List<CardDetail> CardDetails = new List<CardDetail>();
    private CardDetail selectedCard;
    private Guid? selectedCardId;
    private bool showAddNewCard = false;
    private CardRequestModel newCardDetails = new CardRequestModel();
    private OrderRequestModel OrderRequest = new OrderRequestModel();
    private int AvailableQuantityForTheProduct;
    private string ExpiryDateString { get; set; }
    private string CardNumberFormatted
    {
        get => FormatCardNumberForDisplay(newCardDetails.CardNumber);
        set => newCardDetails.CardNumber = FormatForStorage(value);
    }
    private DateTime FormattedExpiryDate
    {
        get
        {
            // Try to parse the string into a DateTime object
            if (DateTime.TryParseExact(ExpiryDateString, "MM/yy", null, System.Globalization.DateTimeStyles.None, out var date))
            {
                // Return a DateTime with the first day of the month
                return new DateTime(date.Year, date.Month, 1);
            }
            return DateTime.MinValue; // Return a default value if parsing fails
        }
        set
        {
            // Format the DateTime object back into MM/YY for display
            ExpiryDateString = value.ToString("MM/yy");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if(AuthState.Value.IsAuthenticated)
        {   
            CheckoutState.StateChanged += StateHasChanged;

            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

            var selectedProducts = new List<ProductViewModel>();
            var quantities = new Dictionary<string, int>();

            if (query.TryGetValue("productId", out var productId) && !string.IsNullOrWhiteSpace(productId) &&
                query.TryGetValue("quantity", out var quantity) && int.TryParse(quantity, out var singleProductQuantity))
            {
                try
                {
                    var id = Guid.Parse(productId);
                    Dispatcher.Dispatch(new FetchProductsAction(new List<Guid> { id }));
                    var product = await ProductService.GetProductByProductId(id);
                    if(product != null)
                    {
                        selectedProducts.Add(product);
                        quantities[productId] = singleProductQuantity;
                        AvailableQuantityForTheProduct = product.QuantityInStock;
                    }
                }
                catch (Exception ex)
                {
                    // Handle any errors that occur during fetching
                    errorMessage = $"Error fetching product details: {ex.Message}";
                }
            }
            else if (query.TryGetValue("productIds", out var productIds) && !string.IsNullOrWhiteSpace(productIds) &&
                     query.TryGetValue("quantities", out var quantitiesStr) && !string.IsNullOrWhiteSpace(quantitiesStr))
            {
                var productIdArray = productIds.ToString().Split(",");
                var quantityArray = quantitiesStr.ToString().Split(",").Select(int.Parse).ToArray();
                var productGuids = productIdArray.Select(id => Guid.Parse(id)).ToList();
                var fetchTasks = new List<Task<ProductViewModel>>();

                for (int i = 0; i < productIdArray.Length; i++)
                {
                    var id = Guid.Parse(productIdArray[i]);
                    fetchTasks.Add(ProductService.GetProductByProductId(id));
                    quantities[productIdArray[i]] = quantityArray[i];
                }

                var products = await Task.WhenAll(fetchTasks);
                foreach (var product in products)
                {
                    if (product != null)
                    {
                        selectedProducts.Add(product);
                    }
                }
            }
            else
            {
                errorMessage = "Product ID(s) or quantities not specified.";
            }

            UserInfo = UserHelper.GetUserDetailFromToken(AuthState.Value.Token);
            UserId = Guid.Parse(UserInfo.Id);

            CheckoutState.Value.SelectedProducts = selectedProducts;
            CheckoutState.Value.Quantities = quantities;

            Dispatcher.Dispatch(new FetchAddressesForUserAction(UserId));
            Dispatcher.Dispatch(new FetchCardsForUserAction(UserId));

            Addresses ??= new List<AddressViewModel>(); 
            // Update the checkout state with selected products and quantities
            var checkoutState = new CheckoutState(
                selectedProducts,
                null, // Update this with the selected address
                Addresses,
                string.Empty, // Update this with the payment option
                CheckoutState.Value.CardDetails, // Update this with the card details
                null, // Update this with the selected card
                false, // Update this with the order readiness
                quantities,
                selectedProducts.Sum(p => p.Price * quantities[p.ProductId.ToString()]),
                false,
                errorMessage
            );

            Dispatcher.Dispatch(new UpdateCheckoutStateAction(checkoutState));
        }        
    }


    private async Task OnAddressSelected(AddressViewModel address)
    {
        selectedAddress = address;
        showDropdownAddresses = false; // Ensure the dropdown closes
        Dispatcher.Dispatch(new SetSelectedAddressAction(address)); // Update state
        StateHasChanged();
    }

    private async Task OnCardSelected(CardDetail card)
    {
        selectedCard = card;
        selectedCardId = card.CardId;
        showDropdownCards = false; // Ensure the dropdown closes
        Dispatcher.Dispatch(new SetSelectedCardAction(card)); // Update state
        StateHasChanged();
    }

    private void AddNewAddressSelected()
    {
        showAddNewAddress = true;
        newAddress = new AddressRequestModel(); // Clear the form
        StateHasChanged();
    }

    private void AddNewCardForPayment()
    {
        showAddNewCard = true;
    }

    private void ToggleDropdown()
    {
        showDropdownAddresses = !showDropdownAddresses;
        Console.WriteLine($"Dropdown State: {showDropdownAddresses}"); // Debug output

        StateHasChanged();
    }


    private void StateHasChanged(object sender, EventArgs e)
    {
        Addresses = CheckoutState.Value.Addresses.ToList();
        CardDetails = CheckoutState.Value.CardDetails.ToList();
        StateHasChanged();
    }

    public void Dispose()
    {
        CheckoutState.StateChanged -= StateHasChanged;
    }

    private async Task HandleAddNewAddress()
    {
        var userDetail = UserHelper.GetUserDetailFromToken(AuthState.Value.Token);

        var addressRequest = new AddressRequestModel
            {
                UserId = userDetail.Id,
                Street = newAddress.Street,
                City = newAddress.City,
                State = newAddress.State,
                PostCode = newAddress.PostCode,
                Country = newAddress.Country
            };

        Dispatcher.Dispatch(new AddNewAddressAction(addressRequest));
        await LoadAddresses();
        showAddNewAddress = false;
        StateHasChanged();
    }

    private async Task LoadAddresses()
    {
        // Logic to reload the addresses (e.g., from a service or state)
        Dispatcher.Dispatch(new FetchAddressesForUserAction(UserId));
    }


    private async Task LoadCardDetail()
    {
        Dispatcher.Dispatch(new FetchCardsForUserAction(UserId));
    }

    private void SetPaymentOptionToCash()
    {
        Dispatcher.Dispatch(new SetPaymentOptionAction("cash"));
    }

    private void SetPaymentOptionToCard()
    {
        Dispatcher.Dispatch(new SetPaymentOptionAction("card"));
    }

    private void ToggleAddNewCard()
    {
        showAddNewCard = !showAddNewCard; // Toggles the visibility of the add new card form
    }

    // Method to generate quantity options based on available quantity
    private IEnumerable<int> GenerateQuantityOptions(int stock)
    {
        return Enumerable.Range(1, stock);
    }

    private void UpdateQuantity(string productId, int quantity)
    {
        var quantities = new Dictionary<string, int>(CheckoutState.Value.Quantities);
        quantities[productId] = quantity;

        var totalPrice = CheckoutState.Value.SelectedProducts.Sum(p => p.Price * quantities[p.ProductId.ToString()]);

        var updatedState = new CheckoutState(
            CheckoutState.Value.SelectedProducts,
            CheckoutState.Value.SelectedAddress,
            CheckoutState.Value.Addresses,
            CheckoutState.Value.PaymentOption,
            CheckoutState.Value.CardDetails,
            CheckoutState.Value.SelectedCard,
            CheckoutState.Value.IsOrderReady,
            quantities,
            totalPrice,
            CheckoutState.Value.IsLoading,
            CheckoutState.Value.ErrorMessage
        );

        Dispatcher.Dispatch(new UpdateCheckoutStateAction(updatedState));
    }

    private void FormatExpiryDate()
    {
        if (string.IsNullOrEmpty(ExpiryDateString))
            return;

        // Remove any non-digit characters
        var digitsOnly = new string(ExpiryDateString.Where(char.IsDigit).ToArray());

        if (digitsOnly.Length == 4)
        {
            // Format as MM/YYYY
            ExpiryDateString = $"{digitsOnly.Substring(0, 2)}/{digitsOnly.Substring(2, 2)}";
        }
        else if (digitsOnly.Length == 6)
        {
            // If a user enters all digits including the year
            ExpiryDateString = $"{digitsOnly.Substring(0, 2)}/{digitsOnly.Substring(2)}";
        }
    }

    private void OnCardNumberInput(ChangeEventArgs e)
    {
        var input = e.Value.ToString();
        newCardDetails.CardNumber = FormatForStorage(input);
        CardNumberFormatted = FormatCardNumberForDisplay(newCardDetails.CardNumber);
    }

    private string FormatCardNumberForDisplay(string cardNumber)
    {
        if (string.IsNullOrWhiteSpace(cardNumber))
            return string.Empty;

        // Remove existing spaces first
        var digitsOnly = new string(cardNumber.Where(char.IsDigit).ToArray());

        // Insert spaces every 4 digits
        return string.Join(" ", Enumerable.Range(0, digitsOnly.Length / 4)
                                          .Select(i => digitsOnly.Substring(i * 4, Math.Min(4, digitsOnly.Length - i * 4))));
    }

    private string FormatForStorage(string input)
    {
        // Remove all spaces to store the number as a continuous string of digits
        return new string(input.Where(char.IsDigit).ToArray());
    }

    private async Task HandleAddCard()
    {
        newCardDetails.ExpiryDate = FormattedExpiryDate;
        var userDetail = UserHelper.GetUserDetailFromToken(AuthState.Value.Token);
        var cardRequest = new CardRequestModel
            {
                UserId = userDetail.Id,
                CardHolderName = newCardDetails.CardHolderName,
                CardNumber = newCardDetails.CardNumber,
                ExpiryDate = newCardDetails.ExpiryDate,
                Cvv = newCardDetails.Cvv
            };

        // Logic to call a service and add the new card
        Dispatcher.Dispatch(new AddNewCardAction(cardRequest));
        await LoadCardDetail();
        showAddNewCard = false;
        StateHasChanged();
    }


    private async Task HandlePlaceOrder()
    {
        var orderProducts = CheckoutState.Value.SelectedProducts.Select(product => new OrderProductModel
        {
            ProductId = product.ProductId,
            Quantity = CheckoutState.Value.Quantities[product.ProductId.ToString()]
        }).ToList();

        var orderRequest = new OrderRequestModel
        {
            UserId = UserId,
            Products = orderProducts,
            CardId = CheckoutState.Value.SelectedCard?.CardId,
            ShippingAddressId = CheckoutState.Value.SelectedAddress.Id,
            PaymentMethod = CheckoutState.Value.PaymentOption
        };

        var order = await OrderService.PlaceOrder(orderRequest, AuthState.Value.Token);
        if (order != null)
        {
            var notificationMessage = new NotificationModel
            {
                Message = "Your order has been placed successfully.",
                Type = NotificationMessageType.Success
            };

            Notification.Notify(notificationMessage);
            var trackingNumber = order.OrderNumber; // Assuming `OrderNumber` is part of the order model
            var confirmationUrl = $"/checkout/order/newPurchaseDetail?trackingNumber={trackingNumber}";

            await InvokeAsync(() =>
            {
                Dispatcher.Dispatch(new ClearCartAction()); // Dispatch an action to clear the cart
                NavigationManager.NavigateTo(confirmationUrl);
                StateHasChanged();
            });
        }
        else
        {
            var notificationMessage = new NotificationModel
            {
                Message = "Something went wrong with your order.",
                Type = NotificationMessageType.Error
            };

            Notification.Notify(notificationMessage);
            await InvokeAsync(StateHasChanged);
        }
    }

}
