@page "/reset-password"
@using ApplicationToSellThings.BlazorUI.Models
@using ApplicationToSellThings.BlazorUI.Services
@using ApplicationToSellThings.BlazorUI.Services.Interfaces
@inject IResetForgotPasswordService ResetPassService
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager

<section class="gradient-custom">
    <div class="container py-5 h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col-12 col-md-8 col-lg-6 col-xl-5">
                <div class="card" style="border-radius: 2rem;">
                    <div class="card-body p-5">

                        <div class="b-3 mt-md-4">
                        </div>
                        <div class="b-3 mt-md-4">
                            <h5 class="fw-bold mb-5">Reset account password</h5>
                            <body class="fw-bold mb-5">Enter a new password for @Email</body>
                        </div>
                        @if (string.IsNullOrEmpty(Email) || string.IsNullOrEmpty(Token))
                        {
                            <p class="text-danger">Invalid reset password link. Please request a new one.</p>
                        }
                        else
                        {
                            <div class="mb-3 mt-md-4 text-center">
                                <EditForm Model="@ResetPassModel" OnValidSubmit="OnValidSubmit">
                                    <DataAnnotationsValidator />
                                    <div class="form-group floating-label mt-3">
                                        <MudTextField Class="input-fields" Label="New Password" @bind-Value="@ResetPassModel.NewPassword" Required="true" RequiredError="Password is required" InputType="InputType.Password" For="@(() => ResetPassModel.NewPassword)">
                                            <ValidationMessage For="@(() => ResetPassModel.NewPassword)" />
                                        </MudTextField>
                                        @if (!string.IsNullOrEmpty(PasswordError))
                                        {
                                            <div class="text-danger text-md-start">@PasswordError</div>
                                        }
                                    </div>

                                    <div class="form-group floating-label mt-3">
                                        <MudTextField Class="input-fields" Label="Confirm Password" @bind-Value="@ConfirmPassword" Required="true" RequiredError="Password is required" InputType="InputType.Password" For="@(() => ConfirmPassword)">
                                            <ValidationMessage For="@(() => ConfirmPassword)" />
                                        </MudTextField>
                                        @if (!string.IsNullOrEmpty(PasswordError))
                                        {
                                            <div class="text-danger text-md-start">@PasswordError</div>
                                        }
                                    </div>

                                    <div class="form-group align-center mt-4">
                                        <button class=" btn-account px-2 py-2" type="submit">Reset Password</button>
                                    </div>
                                </EditForm>
                            </div>
                        }                                          
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code {
    [Parameter] public string Email { get; set; }
    [Parameter] public string Token { get; set; }
    private ResetPasswordModel ResetPassModel = new ResetPasswordModel();
    private string PasswordError = string.Empty;
    private string ConfirmPassword { get; set; }

    protected override void OnInitialized()
    {
        var uri = new Uri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        Email = query["email"];
        Token = query["token"];
    }

    private async Task OnValidSubmit()
    {
        if (string.IsNullOrEmpty(ResetPassModel.NewPassword))
        {
            NotificationService.Notify(new NotificationModel
            {
                Icon = Icons.Material.Outlined.Warning,
                Title = "Validation Error",
                Message = "New Password is required.",
                Type = NotificationMessageType.Error,
                Duration = 5000
            });
            return;
        }
        // Check if Confirm Password is empty
        if (string.IsNullOrEmpty(ConfirmPassword))
        {
            NotificationService.Notify(new NotificationModel
                {
                    Icon = Icons.Material.Outlined.Warning,
                    Title = "Validation Error",
                    Message = "Confirm Password is required.",
                    Type = NotificationMessageType.Error,
                    Duration = 5000
                });
            return;
        }

        // Check if passwords match
        if (ResetPassModel.NewPassword != ConfirmPassword)
        {
            NotificationService.Notify(new NotificationModel
                {
                    Icon = Icons.Material.Outlined.Warning,
                    Title = "Validation Error",
                    Message = "Passwords do not match.",
                    Type = NotificationMessageType.Error,
                    Duration = 5000
                });
            return;
        }

        var payload = new ResetPasswordModel
        {
            Email = Email,
            Token = Token,
            NewPassword = ResetPassModel.NewPassword
        };

        try
        {
            var response = await ResetPassService.ResetPasswordForuser(Email, Token, payload);

            if (response != null)
            {
                NotificationService.Notify(new NotificationModel
                    {
                        Icon = Icons.Material.Outlined.CheckCircle,
                        Title = "Success",
                        Message = $"Password reset successfully. Redirecting to login...",
                        Type = NotificationMessageType.Success,
                        Duration = 5000
                    });

                await Task.Delay(2000); // Small delay to show the success message
                NavigationManager.NavigateTo("/auth/login");
            }
            else
            {
                NotificationService.Notify(new NotificationModel
                    {
                        Icon = Icons.Material.Outlined.CheckCircle,
                        Title = "Warning",
                        Message = $"Failed to reset password",
                        Type = NotificationMessageType.Warning,
                        Duration = 5000
                    });               
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationModel
                {
                    Icon = Icons.Material.Outlined.CheckCircle,
                    Title = "Error",
                    Message = $"{ex.Message}",
                    Type = NotificationMessageType.Error,
                    Duration = 5000
                });
        }
    }
}
