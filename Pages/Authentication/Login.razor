@page "/auth/login"
@using System.ComponentModel.DataAnnotations
@using ApplicationToSellThings.BlazorUI.Helper;
@using ApplicationToSellThings.BlazorUI.Models;
@using ApplicationToSellThings.BlazorUI.Services.Interfaces;
@using ApplicationToSellThings.BlazorUI.Services;
@using ApplicationToSellThings.BlazorUI.Store.Action;
@using System.IdentityModel.Tokens.Jwt;
@using Microsoft.AspNetCore.WebUtilities;
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IAuthService AuthService
@inject NotificationService NotificationService
@inject IDispatcher Dispatcher
@inject UserDetailHelper UserDetailHelper

@if (IsLoading)
{
    <p>Loading...</p>
}
else
{
    <section class="gradient-custom">
        <div class="container py-5 h-100">
            <div class="row d-flex justify-content-center align-items-center h-100">
                <div class="col-12 col-md-8 col-lg-6 col-xl-5">
                    <div class="card" style="border-radius: 2rem;">
                        <div class="card-body p-5">

                            <div class="b-3 mt-md-4">
                                
                            </div>
                            <div class="b-3 mt-md-4">
                                <h5 class="fw-bold mb-5">Welcome back!</h5>
                                <h5 class="fw-bold mb-5">Please sign in to continue</h5>
                            </div>
                            
                            <div class="mb-3 mt-md-4 text-center">
                                <EditForm Model="@LoginUser" OnValidSubmit="OnValidSubmit">
                                    <DataAnnotationsValidator/>
                                    <div class="form-group floating-label">
                                        <MudTextField Class="input-fields" Label="Email" @bind-Value="@LoginUser.Email" Required="true" RequiredError="Email is required" For="@(() => LoginUser.Email)">
                                            <ValidationMessage For="@(() => LoginUser.Email)" />
                                        </MudTextField>
                                        @if (!string.IsNullOrEmpty(EmailError))
                                        {
                                            <div class="text-danger text-md-start">@EmailError</div>
                                        }
                                    </div>

                                    <div class="form-group floating-label mt-3">
                                        <MudTextField Class="input-fields" Label="Password" @bind-Value="@LoginUser.Password" Required="true" RequiredError="Password is required" InputType="InputType.Password" For="@(() => LoginUser.Password)">
                                            <ValidationMessage For="@(() => LoginUser.Password)" />
                                        </MudTextField>
                                        @if (!string.IsNullOrEmpty(PasswordError))
                                        {
                                            <div class="text-danger text-md-start">@PasswordError</div>
                                        }
                                    </div>

                                    <div class="form-group align-center mt-4">
                                        <button class=" btn-account px-2 py-2" type="submit">Sign In</button>
                                    </div>
                                </EditForm>
                            </div>
                            <div class="row d-flex">
                                <p class="small mt-2"><a href="/forgot-password">Forgot password?</a></p>
                                <p>
                                    Don't have an account? <a href="/auth/register-account" class="text-decoration-underline">Create an account</a>
                                </p>
                            </div>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
}


@code {
    private bool IsLoading = false;
    private MudForm form;
    private string email;
    private string password;
    private LoginUser LoginUser = new LoginUser();
    private string errorMessage = string.Empty;
    private string returnUrl = string.Empty;
    private string EmailError = string.Empty;
    private string PasswordError = string.Empty;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url.FirstOrDefault();
        }

        StateHasChanged();
    }

    private string ValidateEmail(string email)
    {
        if (string.IsNullOrEmpty(email))
        {
            return "Email is required";
        }
        if (!new EmailAddressAttribute().IsValid(email))
        {
            return "Invalid email format";
        }
        return null;
    }

    private async Task OnValidSubmit()
    {
        Console.WriteLine("Form SUbmit clicked...");
        IsLoading = true;
        EmailError = string.Empty;
        PasswordError = string.Empty;
        var result = await AuthService.UserLogin(LoginUser);
        if (result != null && result.StatusCode == 200 && !string.IsNullOrWhiteSpace(result.Data))
        {
            var token = result.Data;
            var userRoles = result.Items;
            var userDetail = UserDetailHelper.GetUserDetailFromToken(token);

            Dispatcher.Dispatch(new LoginAction(token, userDetail.UserName, userDetail.Email, userRoles));

            NotificationService.Notify(new NotificationModel
                {
                    Icon = Icons.Material.Outlined.CheckCircle,
                    Title = "Success",
                    Message = result?.Message,
                    Type = NotificationMessageType.Success,
                    Duration = 5000
                });

            if (!string.IsNullOrWhiteSpace(returnUrl))
            {
                NavigationManager.NavigateTo(returnUrl);
            }
            else
            {
                if (userRoles.Contains("Admin"))
                {
                    NavigationManager.NavigateTo("/admin/dashboard");
                    StateHasChanged();

                }
                else if (userRoles.Contains("User"))
                {
                    NavigationManager.NavigateTo("/products");
                    StateHasChanged();

                }
                else
                {
                    // Handle other roles or unexpected scenarios
                    NotificationService.Notify(new NotificationModel
                        {
                            Icon = Icons.Material.Outlined.Warning,
                            Title = "Warning",
                            Message = "Unauthorized access",
                            Type = NotificationMessageType.Warning,
                            Duration = 5000
                        });
                }
            }
        }
        else if (result.StatusCode == 404)
        {
            // Display a toast notification if the user does not exist
            NotificationService.Notify(new NotificationModel
                {
                    Icon = Icons.Material.Outlined.Warning,
                    Title = "Warning",
                    Message = result.Message,
                    Type = NotificationMessageType.Warning,
                    Duration = 5000
                });
            IsLoading = false;
        }
        else if (result.StatusCode == 401)
        {

            PasswordError = "The password you entered is incorrect. Please try again.";
            IsLoading = false;
            NotificationService.Notify(new NotificationModel
                {
                    Icon = Icons.Material.Outlined.Warning,
                    Title = "Warning",
                    Message = result.Message,
                    Type = NotificationMessageType.Warning,
                    Duration = 5000
                });
        }
        else if (result.StatusCode == 500)
        {
            NotificationService.Notify(new NotificationModel
                {
                    Icon = Icons.Material.Outlined.Error,
                    Title = "Error",
                    Message = "Internal Server Error. Please try again later.",
                    Type = NotificationMessageType.Error,
                    Duration = 5000
                });

            IsLoading = false;
        }

    }

    
}
