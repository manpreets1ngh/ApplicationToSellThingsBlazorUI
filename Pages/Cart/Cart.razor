@page "/checkout"
@using ApplicationToSellThings.BlazorUI.Services.Interfaces
@inject IState<CartState> CartState
@inject IState<AuthState> AuthState
@inject ICartService CartService
@inject NavigationManager NavigationManager

<section class="gradient-custom">
    <MudContainer MaxWidth="MaxWidth.Large">
        <h2>Cart Items</h2>
        <div class="row">
            <div class="cart-items">
                <MudCard Class="container-fluid mt-3">
                    <MudCardContent>
                        @if (CartState.Value.Items.Count > 0)
                        {
                            <MudList Class="mt-2">
                                @foreach (var item in CartState.Value.Items)
                                {
                                    <MudListItem Class="mb-4">
                                        <MudGrid>
                                            <MudItem xs="12" sm="4">
                                                <MudText Typo="Typo.body1">@item.ProductName</MudText>
                                            </MudItem>
                                            <MudItem xs="12" sm="2">
                                                <MudText Typo="Typo.body1">@item.BrandName</MudText>
                                            </MudItem>
                                            <MudItem xs="12" sm="2">
                                                <input type="number" min="1" value="@item.Quantity" @onchange="(e) => UpdateQuantity(item.ProductId, int.Parse(e.Value.ToString()))"/>
                                            </MudItem>
                                            <MudItem xs="12" sm="2">
                                                <MudText Typo="Typo.body2">£@item.Price</MudText>
                                            </MudItem>
                                            <MudItem xs="12" sm="2">
                                                <MudButton Variant="Variant.Text" OnClick="() => RemoveFromCart(item.ProductId)" Color="Color.Secondary">Remove</MudButton>
                                            </MudItem>
                                        </MudGrid>
                                    </MudListItem>
                                }
                            </MudList>
                        }
                        else
                        {
                            <MudText Typo="Typo.subtitle1" Align="Align.Center">The cart is empty...</MudText>
                        }
                    </MudCardContent>
                    <MudCardActions Class="justify-content-end">
                        <MudButton Variant="Variant.Text" OnClick="ProceedToCheckout" Color="Color.Primary">Proceed to Checkout</MudButton>
                    </MudCardActions>
                </MudCard>
            </div>
        </div>
    </MudContainer>
</section>

@code {

    protected override async Task OnInitializedAsync()
    {
        if (AuthState.Value.IsAuthenticated)
        {
            await CartService.LoadCartAsync();
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }
    
    private void UpdateQuantity(string productId, int quantity)
    {
        CartService.UpdateQuantity(productId, quantity);
    }

    private void RemoveFromCart(string productId)
    {
        CartService.RemoveFromCart(productId);
    }

    private void ProceedToCheckout()
    {
        var cartItems = CartState.Value.Items;
        var productIds = string.Join(",", cartItems.Select(i => i.ProductId));
        var quantities = string.Join(",", cartItems.Select(i => i.Quantity));
        var uri = $"/Orders/PlaceOrder?productIds={productIds}&quantities={quantities}";
        NavigationManager.NavigateTo(uri);
    }
}